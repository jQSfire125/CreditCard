y = "Number of transactions")
# histplot of time between 4000 and 27000
df %>%
filter(Time %in% (4000:27000)) %>%
ggplot(aes(x = Time)) +
geom_histogram(bins = 30) +
scale_x_continuous(label = comma, breaks = seq(5000, 25000, 5000)) +
labs(title = "Transactions, night 1",
x = "Time (seconds)",
y = "Number of transactions")
# histplot of time between 89000 and 112000
df %>%
filter(Time %in% (89000:112000)) %>%
ggplot(aes(x = Time)) +
geom_histogram(bins = 30) +
scale_x_continuous(label = comma, breaks = seq(90000, 110000, 5000)) +
labs(title = "Transactions, night 2",
x = "Time (seconds)",
y = "Number of transactions")
# histplot of time between 89000 and 112000
df %>%
filter(Time %in% (89000:112000)) %>%
ggplot(aes(x = Time)) +
geom_histogram(bins = 30, color = "white", fill = "blue") +
scale_x_continuous(label = comma, breaks = seq(90000, 110000, 5000)) +
labs(title = "Transactions, night 2",
x = "Time (seconds)",
y = "Number of transactions")
# histplot of time between 89000 and 112000
df %>%
filter(Time %in% (89000:112000)) %>%
ggplot(aes(x = Time)) +
geom_histogram(bins = 30, fill = "gray", color = "black") +
scale_x_continuous(label = comma, breaks = seq(90000, 110000, 5000)) +
labs(title = "Transactions, night 2",
x = "Time (seconds)",
y = "Number of transactions")
# histplot of time
df %>%
ggplot(aes(x = Time)) +
geom_histogram(bins = 100, fill = "gray", color = "black") +
scale_x_continuous(label = comma, breaks = seq(0, 175000, 25000)) +
scale_y_continuous(label = comma) +
labs(title = "Transactions by Time",
x = "Time (seconds)",
y = "Number of transactions")
# histplot of amount
df %>%
ggplot(aes(x = Amount)) +
geom_histogram(bins = 100, fill = "gray", color = "black") +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amounts",
x = "Amount (Euros)",
y = "Number of transactions")
# histplot of amount
df %>%
ggplot(aes(x = Amount)) +
geom_histogram(bins = 100, fill = "gray", color = "black") +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# violinplot of amount??
df %>%
ggplot(aes(x = Amount)) +
geom_violin() +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# violinplot of amount??
df %>%
ggplot(aes(x = Amount, y = ..count..)) +
geom_violin() +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# violinplot of amount??
df %>%
ggplot(aes(x = Amount, y = stat(count))) +
geom_violin() +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# violinplot of amount??
df %>%
ggplot(aes(x = Time, y = stat(count))) +
geom_violin() +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# violinplot of amount??
df %>%
ggplot(aes(x = Amount, y = stat(density))) +
geom_violin() +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# histplot of amount log x
df %>%
ggplot(aes(x = Amount)) +
geom_histogram() +
scale_x_log10() +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# histplot of amount log x
df %>%
ggplot(aes(x = Amount)) +
geom_histogram(bins = 50) +
scale_x_log10() +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# histplot of amount log x
df %>%
ggplot(aes(x = Amount)) +
geom_histogram(bins = 50) +
scale_x_log10(breaks = seq(0:3)) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# histplot of amount log x
df %>%
ggplot(aes(x = Amount)) +
geom_histogram(bins = 50) +
scale_x_log10() +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
# histplot of amount log x
df %>%
ggplot(aes(x = Amount)) +
geom_histogram(bins = 100, fill = "gray", color = "black") +
scale_x_log10() +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
sum(df$Amount == 0)
sum(df$Amount < 0)
sum(duplicated(df))
duplicated(df)
new_df <- df[-duplicated(df)]
new_df <- df[-duplicated(df), ]
duplicates <- duplicated(df)
new_df <- df[-duplicates]
new_df <- df[-duplicates,]
new_df <- df[!duplicates]
new_df <- df[!duplicates,]
length(df) - length(new_df)
length(df$y) - length(new_df)
length(df$Time) - length(new_df$Time)
new_df <- df[!duplicated(df),]
length(df$Time) - length(new_df$Time)
hist(df)
?matplot
for(i in 1:length(names(new_df))){
mname <- substitute(new_df[,i])
if(is.factor(new_df[,i])){
plot(new_df[,i],main=names(new_df)[i])}
else{hist(new_df[,i],main=names(new_df)[i])}
}
for(i in 1:10){
mname <- substitute(df[,i])
if(is.factor(df[,i])){
plot(df[,i],main=names(df)[i])}
else{hist(df[,i],main=names(df)[i])}
}
hist(df[,1]0)
hist(df[,1])
hist(df[,2])
hist(df$V1)
df %>% ggplot(aes(x = Time)) +
geom_density() +
facet_wrap(~Class)
df %>% ggplot(aes(x = Amount)) +
geom_density() +
facet_wrap(~Class)
df %>% ggplot(aes(x = V1)) +
geom_density() +
facet_wrap(~Class)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
hist.data.frame(df)
hist.data.frame(df[,1:29])
library(reshape2)
d <- melt(df[, 1:29])
ggplot(d, aes(x = value)) +
facet_wrap(~variable) + geom_histogram()
ggplot(d, aes(x = value)) +
+ facet_wrap(~variable, scales = "free_x") +
geom_histogram()
ggplot(d, aes(x = value)) +
+ facet_wrap(~variable, scales = "free_x") +
geom_histogram()
ggplot(d, aes(x = value)) +
facet_wrap(~variable, scales = "free_x") +
geom_histogram()
ggplot(d, aes(x = value)) +
facet_wrap(~variable, scales = "free_x") +
geom_histogram(bins = 20)
d <- melt(df[, 2:29])
ggplot(d, aes(x = value)) +
facet_wrap(~variable, scales = "free_x") +
geom_histogram(bins = 20)
?melt
ggplot(d, aes(x = value)) +
facet_wrap(~variable, scales = "free_x", n_col = 4) +
geom_histogram(bins = 20)
ggplot(d, aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~variable, n_col = 4, scales = "free_x")
ggplot(d, aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~variable, ncol = 4, scales = "free_x")
ggplot(d, aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~variable, ncol = 3, scales = "free_x")
ggplot(d, aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~variable, scales = "free_x")
yeojohnson
library(bestNormalize)
install.packages("bestNormalize")
?yeojohnson
library(bestNormalize)
?yeojohnson
df$Amount_Transform <- yeojohnson(df$Amount, standardize = FALSE)
yeojohnson_obj <- yeojohnson(df$Amount, standardize = FALSE)
df$Amount_Transform <- predict(yeojohnson_obj)
df %>%
ggplot(aes(x = Amount_Transform)) +
geom_histogram(bins = 100, fill = "gray", color = "black") +
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma) +
labs(title = "Transaction Amount",
x = "Amount (Euros)",
y = "Number of transactions")
source('~/Documents/DS/Harvard DS/9.Capstone/CreditCard/code.R', echo=TRUE)
corr <- round(cor(df), 2)
source('~/Documents/DS/Harvard DS/9.Capstone/CreditCard/code.R', echo=TRUE)
model_glm <- train(
Class ~ .,
family = binomial(link = "logit"),
cc_test
)
myGrid <- expand.grid(
alpha = 0:1,
lambda = seq(0.0001, 0.1, length = 10)
)
model_glmnet <- train(
Class ~ .,
cc_test,
method = "glmnet",
tuneGrid = myGrid,
trControl = myControl
)
model_glmnet <- train(
Class ~ .,
cc_test,
method = "glmnet",
metric = "ROC",
tuneGrid = myGrid,
trControl = myControl
)
plot(model_glmnet)
myGrid <- expand.grid(
alpha = c(0,0.5,1),
lambda = seq(0.0001, 0.1, length = 10)
)
model_glmnet <- train(
Class ~ .,
cc_test,
method = "glmnet",
metric = "ROC",
tuneGrid = myGrid,
trControl = myControl
)
plot(model_glmnet)
model_glmnet <- train(
Class ~ .,
cc_test,
method = "glmnet",
metric = "AUC",
tuneGrid = myGrid,
trControl = myControl
)
plot(model_glmnet$finalModel)
plot(model_glmnet)
# 2.4.1 Regularized Logistic Regression with glmnet
myControl <- trainControl(
method = "cv",
number = 3,
summaryFunction = prSummary(lev = levels(cc_test$Class)),
classProbs = TRUE,
verboseIter = TRUE
)
# 2.4.1 Regularized Logistic Regression with glmnet
myControl <- trainControl(
method = "cv",
number = 3,
summaryFunction = prSummary(data = ., lev = levels(cc_test$Class)),
classProbs = TRUE,
verboseIter = TRUE
)
# 2.4.1 Regularized Logistic Regression with glmnet
myControl <- trainControl(
method = "cv",
number = 3,
summaryFunction = prSummary(data = cc_test, lev = levels(cc_test$Class)),
classProbs = TRUE,
verboseIter = TRUE
)
# 2.4.1 Regularized Logistic Regression with glmnet
myControl <- trainControl(
method = "cv",
number = 3,
summaryFunction = prSummary(data = cc_test$Class, lev = levels(cc_test$Class)),
classProbs = TRUE,
verboseIter = TRUE
)
# 2.4.1 Regularized Logistic Regression with glmnet
myControl <- trainControl(
method = "cv",
number = 3,
summaryFunction = prSummary,
classProbs = TRUE,
verboseIter = TRUE
)
model_glmnet
# 2.4.4 Random Forest with ranger
model_rf <- train(
Class ~ .,
cc_test,
method = "ranger",
metric = "AUC",
trControl = myControl
)
plot(model_rf)
# 2.4.4 Random Forest with ranger
model_rf <- train(
Class ~ .,
cc_test,
method = "xgbTree",
metric = "AUC",
trControl = myControl
)
plot(model_rf)
# 2.4.1 Regularized Logistic Regression with glmnet
# Tuning grid for glmnet
myGrid_glmnet <- expand.grid(
alpha = 0:1,
lambda = seq(0.0001, 0.1, length = 10)
)
source('~/Documents/DS/Harvard DS/9.Capstone/CreditCard/code.R', echo=TRUE)
warnings()
dotplot(resamps, metric = "AUC")
# 2.4.3 K-Nearest Neighbors with knn
# Train the model
model_knn <- train(
Class ~ .,
cc_test,
method = "knn",
metric = "AUC",
preProcess = c("zv", "center", "scale"),
trControl = myControl
)
plot(model_knn)
# 2.4.6 Compare the models
# First create a list of our models
model_list <- list(
glmnet = model_glmnet,
svm = model_svm,
rf = model_rf,
xgb = model_xgb
)
# Then call the function resamples on our models
resamps <- resamples(model_list)
# Compare the results
summary(resamps)
# Visualize the AUC metric
bwplot(resamps, metric = "AUC")
# Visualize the AUC metric
dotplot(resamps, metric = "AUC")
# Histograms of PCA components
d <- melt(df[, 2:29], variable.name = "feature")
ggplot(d, aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~feature, scales = "free_x")
# Histograms of PCA components
d <- melt(df[, 2:29])
ggplot(d, aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~feature, scales = "free_x")
ggplot(d, aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~variable, scales = "free_x")
# Visualize the main hyperparameters
plot(model_xgb, main="XGBoost")
# Visualize the main hyperparameters
plot(model_rf, main="Random Forest")
# Visualize the main hyperparameters
plot(model_svm, main="Support Vector Machines")
# Visualize the main hyperparameters
plot(model_glmnet, main="Regularized Logistic Regression")
# Visualize the main hyperparameters
plot(model_xgb, main="Extreme Gradient Boosting")
model_glmnet$results
model_glmnet$bestTune
model_glmnet$results$AUC
max(model_glmnet$results$AUC)
summary(resamps)
# Results
max(model_glmnet$results$AUC)
max(model_glmnet$results$Precision)
max(model_glmnet$results$Recall)
# Results
median(model_glmnet$results$AUC)
median(model_glmnet$results$Precision)
median(model_glmnet$results$Recall)
model_glmnet$results$AUC
# Results
model_glmnet$results$AUC
model_glmnet$results$Precision
model_glmnet$results$Recall
# Results
model_glmnet$results["AUC"]
# Results
model_glmnet$results$AUCSD
# Results
model_glmnet$results$AUC
model_glmnet$results$Precision
model_glmnet$results$Recall
# Results
model_glmnet$bestTune
model_glmnet$results$AUC[model_glmnet$bestTune]
dotplot(resamps, metric = "Precision")
dotplot(resamps, metric = "Recall")
dotplot(resamps, metric = "F")
model_glmnet$results$F
# Results
model_svm$bestTune
model_svm$results$AUC
model_svm$results$Precision
model_svm$results$Recall
model_svm$results$F
# Results
model_rf$bestTune
model_rf$results$AUC
model_rf$results$Precision
model_rf$results$Recall
model_rf$results$F
# Results
model_xgb$bestTune
model_xgb$results$AUC
model_xgb$results$Precision
model_xgb$results$Recall
model_xgb$results$F
# Visualize F
dotplot(resamps, metric = "F")
# Visualize Recall
dotplot(resamps, metric = "Recall")
# Visualize Precision
dotplot(resamps, metric = "Precision")
# Visualize F
dotplot(resamps, metric = "F")
# 3. Results
# Final model
# Now that we have chosen our model, we will use in on our test data
preds <- predict(model_xgb, cc_test)
# 3. Results
# Final model
# Now that we have chosen our model, we will use in on our test data
final_preds <- predict(model_xgb, cc_test)
final_cm <- confusionMatrix(final_preds,
as.factor(cc_test$Class),
positive = "Yes")
final_cm$table
final_cm$byClass[["Sensitivity"]]
final_cm$overall
final_cm$mode
final_cm$byClass
final_cm$byClass["F1"]
final_cm$byClass["Recall"]
final_cm$byClass["Precision"]
# Visualize AUC
dotplot(resamps, metric = "AUC")
# Visualize Precision
dotplot(resamps, metric = "Precision")
# Visualize Recall
dotplot(resamps, metric = "Recall")
# Visualize F
dotplot(resamps, metric = "F")
# Visualize AUC
dotplot(resamps, metric = "AUC", main = "Hi")
